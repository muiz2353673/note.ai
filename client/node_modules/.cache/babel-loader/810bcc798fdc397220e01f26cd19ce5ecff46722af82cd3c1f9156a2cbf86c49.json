{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from\"react\";import{toast}from\"react-hot-toast\";import{jsx as _jsx}from\"react/jsx-runtime\";const NotificationContext=/*#__PURE__*/createContext(undefined);export const useNotifications=()=>{const context=useContext(NotificationContext);if(!context){throw new Error(\"useNotifications must be used within a NotificationProvider\");}return context;};export const NotificationProvider=_ref=>{let{children}=_ref;const[notifications,setNotifications]=useState([]);// Load notifications from localStorage on mount\nuseEffect(()=>{const savedNotifications=localStorage.getItem(\"notifications\");if(savedNotifications){try{const parsed=JSON.parse(savedNotifications);setNotifications(parsed.map(n=>({...n,timestamp:new Date(n.timestamp)})));}catch(error){console.error(\"Failed to load notifications:\",error);}}},[]);// Save notifications to localStorage whenever they change\nuseEffect(()=>{localStorage.setItem(\"notifications\",JSON.stringify(notifications));},[notifications]);const unreadCount=notifications.filter(n=>!n.read).length;const addNotification=notification=>{const newNotification={...notification,id:Date.now().toString(),timestamp:new Date(),read:false};setNotifications(prev=>[newNotification,...prev]);// Show toast notification\nswitch(notification.type){case\"success\":toast.success(notification.message);break;case\"error\":toast.error(notification.message);break;case\"warning\":toast(notification.message,{icon:\"⚠️\",style:{background:\"#fef3c7\",color:\"#92400e\"}});break;case\"info\":toast(notification.message,{icon:\"ℹ️\",style:{background:\"#dbeafe\",color:\"#1e40af\"}});break;}};const markAsRead=id=>{setNotifications(prev=>prev.map(n=>n.id===id?{...n,read:true}:n));};const markAllAsRead=()=>{setNotifications(prev=>prev.map(n=>({...n,read:true})));};const removeNotification=id=>{setNotifications(prev=>prev.filter(n=>n.id!==id));};const clearAll=()=>{setNotifications([]);};const value={notifications,unreadCount,addNotification,markAsRead,markAllAsRead,removeNotification,clearAll};return/*#__PURE__*/_jsx(NotificationContext.Provider,{value:value,children:children});};export default NotificationProvider;","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","jsx","_jsx","NotificationContext","undefined","useNotifications","context","Error","NotificationProvider","_ref","children","notifications","setNotifications","savedNotifications","localStorage","getItem","parsed","JSON","parse","map","n","timestamp","Date","error","console","setItem","stringify","unreadCount","filter","read","length","addNotification","notification","newNotification","id","now","toString","prev","type","success","message","icon","style","background","color","markAsRead","markAllAsRead","removeNotification","clearAll","value","Provider"],"sources":["/Users/muiz/Documents/GitHub/note.ai/client/src/contexts/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { toast } from \"react-hot-toast\";\n\ninterface Notification {\n  id: string;\n  type: \"success\" | \"error\" | \"warning\" | \"info\";\n  title: string;\n  message: string;\n  timestamp: Date;\n  read: boolean;\n  action?: {\n    label: string;\n    url: string;\n  };\n}\n\ninterface NotificationContextType {\n  notifications: Notification[];\n  unreadCount: number;\n  addNotification: (notification: Omit<Notification, \"id\" | \"timestamp\" | \"read\">) => void;\n  markAsRead: (id: string) => void;\n  markAllAsRead: () => void;\n  removeNotification: (id: string) => void;\n  clearAll: () => void;\n}\n\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error(\"useNotifications must be used within a NotificationProvider\");\n  }\n  return context;\n};\n\ninterface NotificationProviderProps {\n  children: React.ReactNode;\n}\n\nexport const NotificationProvider: React.FC<NotificationProviderProps> = ({ children }) => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n\n  // Load notifications from localStorage on mount\n  useEffect(() => {\n    const savedNotifications = localStorage.getItem(\"notifications\");\n    if (savedNotifications) {\n      try {\n        const parsed = JSON.parse(savedNotifications);\n        setNotifications(parsed.map((n: any) => ({\n          ...n,\n          timestamp: new Date(n.timestamp),\n        })));\n      } catch (error) {\n        console.error(\"Failed to load notifications:\", error);\n      }\n    }\n  }, []);\n\n  // Save notifications to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem(\"notifications\", JSON.stringify(notifications));\n  }, [notifications]);\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  const addNotification = (notification: Omit<Notification, \"id\" | \"timestamp\" | \"read\">) => {\n    const newNotification: Notification = {\n      ...notification,\n      id: Date.now().toString(),\n      timestamp: new Date(),\n      read: false,\n    };\n\n    setNotifications(prev => [newNotification, ...prev]);\n\n    // Show toast notification\n    switch (notification.type) {\n      case \"success\":\n        toast.success(notification.message);\n        break;\n      case \"error\":\n        toast.error(notification.message);\n        break;\n      case \"warning\":\n        toast(notification.message, {\n          icon: \"⚠️\",\n          style: {\n            background: \"#fef3c7\",\n            color: \"#92400e\",\n          },\n        });\n        break;\n      case \"info\":\n        toast(notification.message, {\n          icon: \"ℹ️\",\n          style: {\n            background: \"#dbeafe\",\n            color: \"#1e40af\",\n          },\n        });\n        break;\n    }\n  };\n\n  const markAsRead = (id: string) => {\n    setNotifications(prev =>\n      prev.map(n => (n.id === id ? { ...n, read: true } : n))\n    );\n  };\n\n  const markAllAsRead = () => {\n    setNotifications(prev =>\n      prev.map(n => ({ ...n, read: true }))\n    );\n  };\n\n  const removeNotification = (id: string) => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n\n  const clearAll = () => {\n    setNotifications([]);\n  };\n\n  const value: NotificationContextType = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    removeNotification,\n    clearAll,\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nexport default NotificationProvider; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}