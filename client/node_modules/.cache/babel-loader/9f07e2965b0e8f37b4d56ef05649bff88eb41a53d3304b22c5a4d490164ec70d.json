{"ast":null,"code":"var _jsxFileName = \"/Users/muiz/Downloads/note.ai/client/src/contexts/NotificationContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext(undefined);\nexport const useNotifications = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error(\"useNotifications must be used within a NotificationProvider\");\n  }\n  return context;\n};\n_s(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n\n  // Load notifications from localStorage on mount\n  useEffect(() => {\n    const savedNotifications = localStorage.getItem(\"notifications\");\n    if (savedNotifications) {\n      try {\n        const parsed = JSON.parse(savedNotifications);\n        setNotifications(parsed.map(n => ({\n          ...n,\n          timestamp: new Date(n.timestamp)\n        })));\n      } catch (error) {\n        console.error(\"Failed to load notifications:\", error);\n      }\n    }\n  }, []);\n\n  // Save notifications to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem(\"notifications\", JSON.stringify(notifications));\n  }, [notifications]);\n  const unreadCount = notifications.filter(n => !n.read).length;\n  const addNotification = notification => {\n    const newNotification = {\n      ...notification,\n      id: Date.now().toString(),\n      timestamp: new Date(),\n      read: false\n    };\n    setNotifications(prev => [newNotification, ...prev]);\n\n    // Show toast notification\n    switch (notification.type) {\n      case \"success\":\n        toast.success(notification.message);\n        break;\n      case \"error\":\n        toast.error(notification.message);\n        break;\n      case \"warning\":\n        toast(notification.message, {\n          icon: \"⚠️\",\n          style: {\n            background: \"#fef3c7\",\n            color: \"#92400e\"\n          }\n        });\n        break;\n      case \"info\":\n        toast(notification.message, {\n          icon: \"ℹ️\",\n          style: {\n            background: \"#dbeafe\",\n            color: \"#1e40af\"\n          }\n        });\n        break;\n    }\n  };\n  const markAsRead = id => {\n    setNotifications(prev => prev.map(n => n.id === id ? {\n      ...n,\n      read: true\n    } : n));\n  };\n  const markAllAsRead = () => {\n    setNotifications(prev => prev.map(n => ({\n      ...n,\n      read: true\n    })));\n  };\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n  const clearAll = () => {\n    setNotifications([]);\n  };\n  const value = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    removeNotification,\n    clearAll\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"2SdJNwZGCcacptfqR8s6ep7Bk7A=\");\n_c = NotificationProvider;\nexport default NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","jsxDEV","_jsxDEV","NotificationContext","undefined","useNotifications","_s","context","Error","NotificationProvider","children","_s2","notifications","setNotifications","savedNotifications","localStorage","getItem","parsed","JSON","parse","map","n","timestamp","Date","error","console","setItem","stringify","unreadCount","filter","read","length","addNotification","notification","newNotification","id","now","toString","prev","type","success","message","icon","style","background","color","markAsRead","markAllAsRead","removeNotification","clearAll","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/muiz/Downloads/note.ai/client/src/contexts/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { toast } from \"react-hot-toast\";\n\ninterface Notification {\n  id: string;\n  type: \"success\" | \"error\" | \"warning\" | \"info\";\n  title: string;\n  message: string;\n  timestamp: Date;\n  read: boolean;\n  action?: {\n    label: string;\n    url: string;\n  };\n}\n\ninterface NotificationContextType {\n  notifications: Notification[];\n  unreadCount: number;\n  addNotification: (notification: Omit<Notification, \"id\" | \"timestamp\" | \"read\">) => void;\n  markAsRead: (id: string) => void;\n  markAllAsRead: () => void;\n  removeNotification: (id: string) => void;\n  clearAll: () => void;\n}\n\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error(\"useNotifications must be used within a NotificationProvider\");\n  }\n  return context;\n};\n\ninterface NotificationProviderProps {\n  children: React.ReactNode;\n}\n\nexport const NotificationProvider: React.FC<NotificationProviderProps> = ({ children }) => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n\n  // Load notifications from localStorage on mount\n  useEffect(() => {\n    const savedNotifications = localStorage.getItem(\"notifications\");\n    if (savedNotifications) {\n      try {\n        const parsed = JSON.parse(savedNotifications);\n        setNotifications(parsed.map((n: any) => ({\n          ...n,\n          timestamp: new Date(n.timestamp),\n        })));\n      } catch (error) {\n        console.error(\"Failed to load notifications:\", error);\n      }\n    }\n  }, []);\n\n  // Save notifications to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem(\"notifications\", JSON.stringify(notifications));\n  }, [notifications]);\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  const addNotification = (notification: Omit<Notification, \"id\" | \"timestamp\" | \"read\">) => {\n    const newNotification: Notification = {\n      ...notification,\n      id: Date.now().toString(),\n      timestamp: new Date(),\n      read: false,\n    };\n\n    setNotifications(prev => [newNotification, ...prev]);\n\n    // Show toast notification\n    switch (notification.type) {\n      case \"success\":\n        toast.success(notification.message);\n        break;\n      case \"error\":\n        toast.error(notification.message);\n        break;\n      case \"warning\":\n        toast(notification.message, {\n          icon: \"⚠️\",\n          style: {\n            background: \"#fef3c7\",\n            color: \"#92400e\",\n          },\n        });\n        break;\n      case \"info\":\n        toast(notification.message, {\n          icon: \"ℹ️\",\n          style: {\n            background: \"#dbeafe\",\n            color: \"#1e40af\",\n          },\n        });\n        break;\n    }\n  };\n\n  const markAsRead = (id: string) => {\n    setNotifications(prev =>\n      prev.map(n => (n.id === id ? { ...n, read: true } : n))\n    );\n  };\n\n  const markAllAsRead = () => {\n    setNotifications(prev =>\n      prev.map(n => ({ ...n, read: true }))\n    );\n  };\n\n  const removeNotification = (id: string) => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n\n  const clearAll = () => {\n    setNotifications([]);\n  };\n\n  const value: NotificationContextType = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    removeNotification,\n    clearAll,\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nexport default NotificationProvider; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}