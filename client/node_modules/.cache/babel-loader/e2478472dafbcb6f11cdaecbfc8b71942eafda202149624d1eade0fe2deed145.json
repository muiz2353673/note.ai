{"ast":null,"code":"var _jsxFileName = \"/Users/muiz/Downloads/note.ai/client/src/contexts/SubscriptionContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport toast from \"react-hot-toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SubscriptionContext = /*#__PURE__*/createContext(undefined);\nexport const useSubscription = () => {\n  _s();\n  const context = useContext(SubscriptionContext);\n  if (context === undefined) {\n    throw new Error(\"useSubscription must be used within a SubscriptionProvider\");\n  }\n  return context;\n};\n_s(useSubscription, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SubscriptionProvider = ({\n  children\n}) => {\n  _s2();\n  const [subscription, setSubscription] = useState(null);\n  const [usage, setUsage] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const fetchSubscriptionStatus = async () => {\n    try {\n      const response = await axios.get(\"/api/subscriptions/status\");\n      setSubscription(response.data.subscription);\n      setUsage(response.data.usage);\n    } catch (error) {\n      console.error(\"Failed to fetch subscription status:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchSubscriptionStatus();\n  }, []);\n  const refreshSubscription = async () => {\n    setLoading(true);\n    await fetchSubscriptionStatus();\n    setLoading(false);\n  };\n  const cancelSubscription = async () => {\n    try {\n      await axios.post(\"/api/subscriptions/cancel\");\n      await refreshSubscription();\n      toast.success(\"Subscription will be cancelled at the end of the current period\");\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || \"Failed to cancel subscription\";\n      toast.error(message);\n      throw error;\n    }\n  };\n  const reactivateSubscription = async () => {\n    try {\n      await axios.post(\"/api/subscriptions/reactivate\");\n      await refreshSubscription();\n      toast.success(\"Subscription reactivated successfully\");\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || \"Failed to reactivate subscription\";\n      toast.error(message);\n      throw error;\n    }\n  };\n  const value = {\n    subscription,\n    usage,\n    loading,\n    refreshSubscription,\n    cancelSubscription,\n    reactivateSubscription\n  };\n  return /*#__PURE__*/_jsxDEV(SubscriptionContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s2(SubscriptionProvider, \"9q7ZrZ77Bgba0kYhQRQdNsjXZ5A=\");\n_c = SubscriptionProvider;\nvar _c;\n$RefreshReg$(_c, \"SubscriptionProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","toast","jsxDEV","_jsxDEV","SubscriptionContext","undefined","useSubscription","_s","context","Error","SubscriptionProvider","children","_s2","subscription","setSubscription","usage","setUsage","loading","setLoading","fetchSubscriptionStatus","response","get","data","error","console","refreshSubscription","cancelSubscription","post","success","_error$response","_error$response$data","message","reactivateSubscription","_error$response2","_error$response2$data","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/muiz/Downloads/note.ai/client/src/contexts/SubscriptionContext.tsx"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  ReactNode,\n} from \"react\";\nimport axios from \"axios\";\nimport toast from \"react-hot-toast\";\n\ninterface Subscription {\n  plan: string;\n  status: string;\n  stripeCustomerId?: string;\n  stripeSubscriptionId?: string;\n  currentPeriodEnd?: string;\n  features: {\n    aiSummaries: number;\n    flashcardGeneration: number;\n    assignmentHelp: number;\n    citations: number;\n  };\n}\n\ninterface Usage {\n  totalNotes: number;\n  totalSummaries: number;\n  totalFlashcards: number;\n  totalAssignments: number;\n  lastActive: string;\n}\n\ninterface SubscriptionContextType {\n  subscription: Subscription | null;\n  usage: Usage | null;\n  loading: boolean;\n  refreshSubscription: () => Promise<void>;\n  cancelSubscription: () => Promise<void>;\n  reactivateSubscription: () => Promise<void>;\n}\n\nconst SubscriptionContext = createContext<SubscriptionContextType | undefined>(\n  undefined\n);\n\nexport const useSubscription = () => {\n  const context = useContext(SubscriptionContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useSubscription must be used within a SubscriptionProvider\"\n    );\n  }\n  return context;\n};\n\ninterface SubscriptionProviderProps {\n  children: ReactNode;\n}\n\nexport const SubscriptionProvider: React.FC<SubscriptionProviderProps> = ({\n  children,\n}) => {\n  const [subscription, setSubscription] = useState<Subscription | null>(null);\n  const [usage, setUsage] = useState<Usage | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const fetchSubscriptionStatus = async () => {\n    try {\n      const response = await axios.get(\"/api/subscriptions/status\");\n      setSubscription(response.data.subscription);\n      setUsage(response.data.usage);\n    } catch (error) {\n      console.error(\"Failed to fetch subscription status:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchSubscriptionStatus();\n  }, []);\n\n  const refreshSubscription = async () => {\n    setLoading(true);\n    await fetchSubscriptionStatus();\n    setLoading(false);\n  };\n\n  const cancelSubscription = async () => {\n    try {\n      await axios.post(\"/api/subscriptions/cancel\");\n      await refreshSubscription();\n      toast.success(\n        \"Subscription will be cancelled at the end of the current period\"\n      );\n    } catch (error: any) {\n      const message =\n        error.response?.data?.error || \"Failed to cancel subscription\";\n      toast.error(message);\n      throw error;\n    }\n  };\n\n  const reactivateSubscription = async () => {\n    try {\n      await axios.post(\"/api/subscriptions/reactivate\");\n      await refreshSubscription();\n      toast.success(\"Subscription reactivated successfully\");\n    } catch (error: any) {\n      const message =\n        error.response?.data?.error || \"Failed to reactivate subscription\";\n      toast.error(message);\n      throw error;\n    }\n  };\n\n  const value: SubscriptionContextType = {\n    subscription,\n    usage,\n    loading,\n    refreshSubscription,\n    cancelSubscription,\n    reactivateSubscription,\n  };\n\n  return (\n    <SubscriptionContext.Provider value={value}>\n      {children}\n    </SubscriptionContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}